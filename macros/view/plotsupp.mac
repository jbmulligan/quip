# %Z% $RCSfile: plotsupp.mac,v $ ver: $Revision: 1.81 $ $Date: 2010/12/02 17:56:12 $

#
# Call No_Reserve first to get a plotting window w/ no axes
# Call Default_Reserve if axes desired (default)
# but last call becomes new default in the execution of the program.
#
# New_Plotter name width height
# # DONE AUTOMATICALLY:  Assign_Margins	# if axes desired...
# Old:
# Plot_Data_Range $xmin $ymin $xmax $ymax
# Y_Legend string
# (Y_Legend_Right string)
# X_Legend string
# (X_Legend_Top string)
# Plot_X_Axis $xmin $xmax $x_tick_spacing $ymin
# Plot_Y_Axis $ymin $ymax $y_tick_spacing $xmin
# Label_X_Ticks $first_x $last_x $x_tick_spacing
# Label_Y_Ticks $ymin $ymax $y_tick_spacing
# (Label_Y_Ticks_Right first max delta)
#
# new:
# Set xmin, xmax, ymin, ymax, x_tick_spacing, y_tick_spacing, x_legend, y_legend, x_tick_auto, y_tick_auto
# Setup_Axes
#
# XYPlot data_vector
# Thick_Plot thickness data_vector
# Symbol Disk 3
# Symbol_Plot data_vector
#
#
# For plotting without axes, use Plot_Space instead of Plot_Data_Range - ?

If var_exists(plotsupp_loaded) "warn 'plotsupp.mac already read!?' exit_macro"

Set plotsupp_loaded 1
Set margins_set 0
Set n_x_custom_ticks 0
Set n_y_custom_ticks 0

# basic plotting macros

Define Setup_Axes 0
Setup_Y_Axis
Setup_X_Axis
.

# Using Check_Var lets us override the default by pre-setting the variable,
# but it does the wrong thing when there is an old value from a previous plotter...
# We address this by having New_Plotter clear (unset) these values...

Define Setup_Y_Axis 0
Set vars_ok 1
Require_Var xmin	# need x axis limits to draw y legend?
Require_Var ymin
Require_Var xmax
Require_Var ymax
#Require_Var y_legend
Require_Var y_tick_auto
If $y_tick_auto "Require_Var y_tick_spacing"
Check_Var y_tick_offset 0
Check_Var y_tick_last $ymax
Check_Var y_tick_first $ymin
If !$vars_ok exit_macro

#advise "Plot_Data_Range $xmin $ymin $xmax $ymax"
Plot_Data_Range $xmin $ymin $xmax $ymax

If var_exists('y_legend')
  'Y_Legend $y_legend'
If $y_tick_auto
  Then 'Plot_Y_Axis_With_Ticks $ymin $ymax $xmin $y_tick_first $y_tick_last $y_tick_spacing \
        Label_Y_Ticks $y_tick_first $y_tick_last $y_tick_spacing'
  Else Custom_Y_Axis
.

Define Redraw_X_Axis 0
Set vars_ok 1
Require_Var xmin
Require_Var xmax
Require_Var ymin
Require_Var ymax
Require_Var x_tick_spacing
If !$vars_ok exit_macro
Plot_X_Axis $xmin $xmax $x_tick_spacing $ymin
Label_X_Ticks $xmin $xmax $x_tick_spacing
.

# Unset old axis vars to make sure that we don't inherit from
# a previous viewer?
#
# This is not currently called, because it was killing x_tick_first read from
# plot param file!?

Define Clear_Axis_Vars 0
UnSet_If xmin
UnSet_If xmax
UnSet_If ymin
UnSet_If ymax
UnSet_If x_tick_spacing
UnSet_If y_tick_spacing
UnSet_If x_tick_offset
UnSet_If y_tick_offset
UnSet_If x_legend
UnSet_If y_legend
UnSet_If y_tick_last
UnSet_If y_tick_first
UnSet_If x_tick_last
UnSet_If x_tick_first
.

Define Setup_X_Axis 0
Set vars_ok 1
Require_Var xmin
Require_Var ymin	# need y axis limits to draw x legend?
Require_Var xmax
Require_Var ymax
#Require_Var x_legend
Require_Var x_tick_auto
If $x_tick_auto "Require_Var x_tick_spacing"
Check_Var x_tick_offset 0
Check_Var x_tick_last $xmax
Check_Var x_tick_first $xmin
If !$vars_ok exit_macro

If var_exists('x_legend')
  'X_Legend $x_legend'
#Plot_X_Axis $xmin $xmax $x_tick_spacing $ymin
#advise "Setup_X_Axis:  x_tick_auto = $x_tick_auto, x_tick_last = $x_tick_last"
If $x_tick_auto
  Then 'Plot_X_Axis_Offset $xmin $xmax $x_tick_spacing $ymin $x_tick_offset $x_tick_last\
        Label_X_Ticks $xmin+$x_tick_offset $x_tick_last $x_tick_spacing'
  Else Custom_X_Axis
.

Define Custom_X_Axis 0
Plain_X_Axis $xmin $xmax $ymin
Assign n_x_ticks $n_x_custom_ticks
If $n_x_ticks<=0 exit_macro
Set tick_idx 0
repeat $n_x_ticks
  Set vname x_tick_${tick_idx}_posn
  If !var_exists('$vname') "warn 'Custom_X_Axis:  $vname is not defined!?' exit_macro"
  Set _x $$vname
  X_Tick_At $_x $ymin		# BUG should allow for offset?

  Set vname x_tick_${tick_idx}_label
  If !var_exists('$vname') "warn 'Custom_X_Axis:  $vname is not defined!?' exit_macro"
  Set label $$vname
  If strlen('$label')<=0
    Then "warn 'Custom_X_Axis:  empty tick label!?'"
    Else "Label_X_Tick $_x $label"

  Increment tick_idx
  end
.

# BUG should merge code with Custom_X_Axis!
Define Custom_Y_Axis 0
Plain_Y_Axis $ymin $ymax $xmin
Assign n_y_ticks $n_y_custom_ticks
If $n_y_ticks<=0 exit_macro
Set tick_idx 0
repeat $n_y_ticks
  Set vname y_tick_${tick_idx}_posn
  If !var_exists('$vname') "warn 'Custom_Y_Axis:  $vname is not defined!?' exit_macro"
  Set _y $$vname
  Y_Tick_At $xmin $_y		# BUG should allow for offset?

  Set vname y_tick_${tick_idx}_label
  If !var_exists('$vname') "warn 'Custom_X_Axis:  $vname is not defined!?' exit_macro"
  Set label $$vname
  If strlen('$label')<=0
    Then "warn 'Custom_Y_Axis:  empty tick label!?'"
    Else "Label_Y_Tick $_y $label"

  Increment tick_idx
  end
.

#
# record length is provided by caller in $dlen

Start_File plotsupp.mac

# default is white on black
# These two macros override this for the current plotter...

Define Black_On_White 0
Plot_Foreground $black
Plot_Background $white
Set label_color $plot_foreground
Set plot_mode black_on_white
.


Define White_On_Black 0
Plot_Foreground	$white
Plot_Background	$black
#Set label_color $default_fg
Set label_color $plot_foreground
Set plot_mode white_on_black
.

# these two macros change the default for new plotters

Define Default_White_On_Black 0
Set default_fg $white
Set default_bg $black
Set label_color $default_fg
Set plot_mode white_on_black
.

Define Default_Black_On_White 0
Set default_fg $black
Set default_bg $white
Set label_color $default_fg
Set plot_mode black_on_white
.


# call once to use an existing viewer as a plotter
Define Use_Viewer_As_Plotter 1 name
Init_New_Plotter $1
.

# should we ignore button releases?

Define Plotter_Click 0
#If $left_button_up exit_macro
#If $middle_button_up exit_macro
#If $right_button_up exit_macro
#If $left_button_up&&$middle_button_up&&$right_button_up exit_macro
If $exit_on_plotter_click exit
Set clicked 1
.

Set xsync_state no	# default:  no sync

Define New_Plotter 3 name dx dy
#Viewer $1 $2 $3
Plotter $1 $2 $3
#Print xsync_state
view
  xsync $xsync_state	# we need this sometimes, but not always?
  #show $1	# don't show by default...  for ios
  quit
Init_New_Plotter $1
Set_Button_Actions $1 Plotter_Click Plotter_Click Plotter_Click
.

Define Init_Plotter_Param_Indices 0
# We store the plotting space parameters in a structure
Set plot_xmin_index		0
Set plot_xmax_index		1
Set plot_ymin_index		2
Set plot_ymax_index		3
Set left_margin_index		4
Set right_margin_index		5
Set bot_margin_index		6
Set top_margin_index		7
Set plot_foreground_index	8	# the "pen" color
Set plot_background_index	9
Set grid_color_index		10
Set label_color_index		11
Set minmax_set_index		12
Set margins_set_index		13
Set n_plotter_params		14	# must be last
.

Define Get_Param_Vec_Name 1 plotter_name
variables despace nospacename $1 quit
Set param_vec_name ${nospacename}_params
.

Define Init_New_Plotter 1 name
#advise "Init_New_Plotter $1"
If strcmp('$the_plotter','no_plotter')
  "Remember_Plotter_Params"
# Here we need to forget everything about the old plotter...

Set minmax_set 0		# this is now a plotter param...
Set margins_set 0		# ditto

Set the_plotter "$1"
Set current_window "$1"
Init_Color_Defs
Plot_Foreground $default_fg
Plot_Background $default_bg
Select_Pen $default_fg
# We set the margins here by default, but would it be better
# to defer and give the user a chance to override the default?
#advise "Setting up plotter '$1' with default margins of zero"
#Zero_Margins			# default
Assign_Margins			# margins by default...
Grid_Color $gray
Erase_Plot
#Clear_Axis_Vars	# BUG this can obliterate settings read from plot param file!?
#advise "Init_New_Plotter:  '$1'"
# This causes trouble if we allow spaces in the plotter name
Get_Param_Vec_Name $1
If !obj_exists('$param_vec_name')
  "Vector $param_vec_name $n_plotter_params 1 float"
data ascii
  input_fmt ' '
	read $param_vec_name -
	0
	ncols('$1')-1
	0
	nrows('$1')-1
	0 0 0 0
	$plot_foreground
	$plot_background
	$grid_color
	$label_color
	$minmax_set
	$margins_set

	quit quit
.

Define Delete_Plotter 1 plotter_name
Push_Var the_plotter
Push_Var current_window
Select_Plotter $1
Delete_Viewer $1
#advise "Delete_Plotter calling Delete_Image $param_vec_name"
Delete_Image $param_vec_name
Pop_Var the_plotter
Pop_Var current_window
If strcmp('$the_plotter','no_plotter')
  "advise 'Delete_Plotter setting the_plotter to no_plotter' Set the_plotter no_plotter"
.

# Remember_Plotter_Params:	store script vars to memory data structure

Define Remember_Plotter_Params 0
If !strcmp('$the_plotter','no_plotter')
  "error_exit 'Remember_Plotter_Params:  no plotter set'"
#Show_Plotter_Params
data
  ascii
    input_fmt ' '
    read $param_vec_name -
	$plot_xmin
	$plot_xmax
	$plot_ymin
	$plot_ymax
	$left_margin
	$right_margin
	$bot_margin
	$top_margin
	$plot_foreground
	$plot_background
	$grid_color
	$label_color
	$minmax_set
	$margins_set
    quit
  quit
.

Define Recall_Var 1 varname
Set idx_name ${1}_index
Assign $1 value($param_vec_name{$$idx_name})
.

# We call this to restore the settings of a plotter
# we have used before.  But some of the settings in Update_...
# are not recalled???

Define Recall_Plotter_Params 0
If !strcmp('$the_plotter','no_plotter')
  "error_exit 'Recall_Plotter_Params:  no plotter set'"
Recall_Var plot_xmin
Recall_Var plot_xmin
Recall_Var plot_xmax
Recall_Var plot_ymin
Recall_Var plot_ymax
Recall_Var left_margin
Recall_Var right_margin
Recall_Var bot_margin
Recall_Var top_margin
Recall_Var plot_foreground
Recall_Var plot_background
Recall_Var grid_color
Recall_Var label_color
Recall_Var minmax_set
Recall_Var margins_set
# show the plotter params when debugging...
#Show_Plotter_Params
Update_Range_Constants
.

Define Show_Plotter_Params 0
advise "-> Plot parameters, current plotter '$the_plotter':"
advise "  > plot limits:  $plot_xmin - $plot_xmax,   $plot_ymin - $plot_ymax"
advise "  > plot margins:  $left_margin - $right_margin,   $bot_margin - $top_margin"
advise "  > plot colors:  $plot_foreground, $plot_background"
advise "  > minmax_set:  $minmax_set    margins_set:  $margins_set"
.

# how many do we have to play with???

Define Init_Color_Indices 0
Set black	20
Set white	21
Set gray	22
Set red		23
Set green	24
Set yellow	25
Set cyan	26
Set blue	27
Set orange	28
Set purple	29
Set magenta	29
Set dark_green	30
Set dark_red	31
Set dark_yellow	32
Set dark_cyan	33
Set dark_magenta	34
.

Define Init_Color_Defs 0
#advise "Init_Color_Defs:  current_window = $current_window"
Setcolor $black 0 0 0
Setcolor $white 255 255 255
Setcolor $gray 50 50 50
Setcolor $red 255 0 0
Setcolor $dark_red 100 0 0
Setcolor $green 0 255 0
Setcolor $dark_green 0 100 0
Setcolor $dark_cyan 0 100 255
Setcolor $dark_magenta 150 0 150
Setcolor $blue 0 0 255
Setcolor $purple 255 0 255	# same as $magenta
Setcolor $yellow 255 255 0
Setcolor $dark_yellow 190 160 0
Setcolor $orange 250 100 0
Setcolor $cyan 0 255 255
Plot_Foreground $default_fg
Plot_Background $default_bg
Grid_Color $gray
# wait for viewer to map - where did this come from???
#view
#  wait $1
#  quit
Erase_Plot
.

Define New_Adjuster 4 name dx dy action_text
Adj_Viewer $1 $2 $3 $4
view
  xsync yes
  show $1
  show $1
  quit
Init_New_Plotter $1
.

Define Set_XSync 1 yesno
view xsync $1 quit
.

Define Select_Plotter 1 plotter_name
# Should selecting a plotter bring it to the front???
view show "$1" quit		# raise viewer
Set recall 0
Assign plotter_changing strcmp('$1','$the_plotter')
If $plotter_changing
  Remember_Plotter_Params
Set the_plotter "$1"
Set current_window "$1"
Get_Param_Vec_Name $1
If $plotter_changing 
  Recall_Plotter_Params
# There are some parameters that are computed...
#advise "Select_Plotter $1   right_margin = $right_margin"
#advise "Select_Plotter $1:  Plot_Data_Range $plot_xmin $plot_ymin $plot_xmax $plot_ymax"
Plot_Data_Range $plot_xmin $plot_ymin $plot_xmax $plot_ymax
.

Define Plot_Foreground_White 0
Setcolor $white 255 255 255
Plot_Foreground $white
.


Define Plot_Foreground 1 color
Set plot_foreground $1
view
  draw $the_plotter
    foreground $1
    quit
  plot $the_plotter
    select $1
    quit
  quit
.

Define Plot_Background 1 color
Set plot_background $1
view
  draw $the_plotter
    background $1
    quit
  quit
.

Define Grid_Color 1 color
Set grid_color $1
.


Define XPlot 1 vector
view
  plot $the_plotter
    xplot $1
    quit
  quit
.

Define YPlot 1 vector
view
  plot $the_plotter
    yplot $1
    quit
  quit
.

Define CYPlot 2 data colors
view
  plot $the_plotter
    cyplot $1 $2
    quit
  quit
.

Define XYPlot 1 vector
view
  plot $the_plotter
    xyplot $1
    quit
  quit
.


Define XYZ_Plot 1 vector
view
  plot $the_plotter
    xyzplot $1
    quit
  quit
.


Define Select_Pen 1 color
#Set pen_color $1
Set plot_foreground $1
view
  plot $the_plotter
    select $plot_foreground
    quit
  quit
.

Define Plot_Space 4 xmin ymin xmax ymax
Tell_If "Plot_Space ($the_plotter) $1 $2 $3 $4"
If !$margins_set "advise 'Plot_Space $the_plotter:  no margins set, using 0' Zero_Margins"
If !$minmax_set
  "Set_Plot_Minmax $1 $2 $3 $4"	# can't do this here if called from Plot_Data_Range

view
  plot $the_plotter
    space $1 $2 $3 $4
    quit
  quit
# should not need to call Remember_Plotter_Params here...
.

Define Erase_Plotter 1 plotter
Select_Plotter $1
Erase_Plot
.

Define Erase_Plot 0
#Plot_Background $plot_background
view
  plot $the_plotter
    erase
    quit
  quit
.

Define PMove 2 x y
view
  plot $the_plotter
    move $1 $2
    quit
  quit
.

Define PCont 2 x y
view
  plot $the_plotter
    cont $1 $2
    quit
  quit
.

Define Hide_Viewer 1 name
Posn_Window $1 $hidex $hidey
.

Define UnHide_Viewer 1 name
Posn_Window $1 $showx $showy
.

# These are the default reserves... what is extra_right_reserve?
# and what if we want two y axes, left and right?
#
# On iOS, we plot to the whole screen, and DISPLAY_WIDTH is pre-defined
# when the app launches - but for unix we want to use the window size???

Define Default_Reserve 0
#Set left_reserve	90
# 120 pixels makes sense on a big screen, but the ipod
# is only 320 pixels wide, so this is more than 1/3...
#Set left_reserve	120


If !var_exists(DISPLAY_WIDTH)
#  'view displays quit quit Assign DISPLAY_WIDTH ncols("$DISPLAY")'
  'view displays quit quit'
If !var_exists(DISPLAY_WIDTH)
  "error_exit 'Displays menu has been entered, but DISPLAY_WIDTH is undefined!?'"

Assign left_reserve	min(120,round($DISPLAY_WIDTH/5))

Set bot_reserve		80		# in screen units
Set right_reserve	40
Set extra_right_reserve	$left_reserve
Set top_reserve		40
Set extra_top_reserve	$bot_reserve
Set tick_len		10
.


Define No_Reserve 0
Set left_reserve	0
Set bot_reserve		0
Set right_reserve	0
Set top_reserve		0
Set tick_len		0
.



# the margins are the fraction of the total window area...

Define Assign_Margins 0
Assign left_margin $left_reserve/ncols('$the_plotter')
Assign right_margin $right_reserve/ncols('$the_plotter')
Assign bot_margin $bot_reserve/nrows('$the_plotter')
Assign top_margin $top_reserve/nrows('$the_plotter')
Set margins_set 1
Tell_If "Assign_Margins:  Plot margins for plotter $the_plotter set to $left_margin, $right_margin, $bot_margin, $top_margin"
.

Define Assign_Extra_Margins 1 where
If !strcmp('$1',right) Extra_Right_Margins
If !strcmp('$1',top) Extra_Top_Margins
If !strcmp('$1',right_and_top) Both_Extra_Margins
.

Define Extra_Right_Margins 0
If !$margins_set Assign_Margins	# install default
#Assign left_margin $left_reserve/ncols('$the_plotter')
Assign right_margin $extra_right_reserve/ncols('$the_plotter')
Tell_If "Extra_Right_Margins:  right_margin = $right_margin"
#Assign bot_margin $bot_reserve/nrows('$the_plotter')
#Assign top_margin $top_reserve/nrows('$the_plotter')
#Set margins_set 1
.

Define Extra_Top_Margins 0
If !$margins_set Assign_Margins	# install default
#Assign bot_margin $bot_reserve/nrows('$the_plotter')
Assign top_margin $extra_top_reserve/nrows('$the_plotter')
#Assign left_margin $left_reserve/ncols('$the_plotter')
#Assign right_margin $right_reserve/ncols('$the_plotter')
#Set margins_set 1
.

Define Both_Extra_Margins 0
Extra_Right_Margins
Extra_Top_Margins
#Assign left_margin $left_reserve/ncols('$the_plotter')
#Assign right_margin $extra_right_reserve/ncols('$the_plotter')
#Assign bot_margin $bot_reserve/nrows('$the_plotter')
#Assign top_margin $extra_top_reserve/nrows('$the_plotter')
#Set margins_set 1
.

Define Zero_Margins 0
Set left_margin 0
Set right_margin 0
Set bot_margin 0
Set top_margin 0
Set margins_set 1
#advise "Plot margins set to Zero"
.

# this is like Plot_Space, but leaves a gap for axes...
# BUG margins set should be per plotter???

Define Plot_Data_Range 4 xmin ymin xmax ymax
Tell_If "Plot_Data_Range $1 $2 $3 $4"
If !$margins_set "Tell_If 'margins not set, assigning default values' Assign_Margins"
Print_If right_margin
#advise "Plot_Data_Range calling Set_Plot_Minmax"
Set_Plot_Minmax $1 $2 $3 $4
Assign x_delta ($3)-($1)				# width of plotting area in plotting units
Assign y_delta ($4)-($2)
Assign h_active 1-($left_margin+$right_margin)	# e.g. 0.7 - fraction of window width used for plotting
Assign v_active 1-($top_margin+$bot_margin)	# e.g. 0.7
Assign left_factor $left_margin/$h_active	# left margin expressed as a fraction of active area
Assign bot_factor $bot_margin/$v_active
Assign right_factor $right_margin/$h_active
Assign top_factor $top_margin/$v_active
Assign pdr_x1 ($1)-$x_delta*$left_factor		# edge of window in plot units
Assign pdr_y1 ($2)-$y_delta*$bot_factor
Assign pdr_x2 ($3)+$x_delta*$right_factor
Assign pdr_y2 ($4)+$y_delta*$top_factor
#advise "Plot_Data_Range calling Plot_Space $pdr_x1 $pdr_y1 $pdr_x2 $pdr_y2"
Plot_Space $pdr_x1 $pdr_y1 $pdr_x2 $pdr_y2
Update_Range_Constants
# tick_len is in pixels (screen units), not plot space units
Assign y_tick_len $tick_len*$h_plot_units_per_screen_unit
Assign x_tick_len $tick_len*$v_plot_units_per_screen_unit
Assign unit_v_offset $x_tick_len*0.3
Assign unit_h_offset $y_tick_len*0.3
Init_Legend_Fonts $the_plotter
Unit_Font
.
# end Plot_Data_Range

Define Set_Plot_Minmax 4 xmin ymin xmax ymax
#advise "Set_Plot_Minmax $1 $2 $3 $4"
Assign plot_xmin $1
Assign plot_ymin $2
Assign plot_xmax $3
Assign plot_ymax $4
Set minmax_set 1
.

Define Show_Plot_Limits 0
Print plot_xmin
Print plot_xmax
Print plot_ymin
Print plot_ymax
.

# Plot_2_Screen - convert a point in plot coords to screen coords

Define Plot_2_Screen 4 xvarname yvarname x y
Get_Plotter_Constants
# these two statements are for debugging...
#advise "Plot_2_Screen $1 $2 $3 $4  -   the_plotter = $the_plotter"
#Show_Plot_Limits

# first get the fractional position in the plotting space
Assign $2 ($4-$plot_ymin)/$n_plot_units_y
Assign $1 ($3-$plot_xmin)/$n_plot_units_x
# turn Y upside down
Assign $2 1-$$2
# scale
Mul_Var $1 $n_plot_pixels_x
Mul_Var $2 $n_plot_pixels_y
# shift origin
Add_Var $1 ncols('$the_plotter')*$left_margin
Add_Var $2 nrows('$the_plotter')*$top_margin
Assign $1 floor($$1+0.5)
Assign $2 floor($$2+0.5)
#advise "Plot_2_Screen $$1 $$2  <-  $3 $4"
.

Define Get_Plotter_Constants 0
Assign n_plot_pixels_x ncols('$the_plotter')*(1-($left_margin+$right_margin))
Assign n_plot_units_x $plot_xmax-$plot_xmin

Assign n_plot_pixels_y nrows('$the_plotter')*(1-($top_margin+$bot_margin))
Assign n_plot_units_y $plot_ymax-$plot_ymin
.

Define Plot_2_Screen_Delta 4 xvarname yvarname dx dy
Get_Plotter_Constants
Assign $1 $3*$n_plot_pixels_x/$n_plot_units_x
Assign $2 $4*$n_plot_pixels_y/$n_plot_units_y
.

# Screen_2_Plot - convert from window coordinates to plotting units
#
# The constants we need are:
#	plot_xmin, plot_xmax
#	plot_ymin, plot_ymax
#	left_margin, right_margin
#	top_margin, bot_margin
#


Define Screen_2_Plot 4 xvarname yvarname x y
#advise "Screen_2_Plot:  margins:  $left_margin - $right_margin"
Assign $1 ($3)-ncols('$the_plotter')*$left_margin
Assign $2 ($4)-nrows('$the_plotter')*$top_margin
#advise "Screen_2_Plot, shifting origin:  $$1 $$2 <- $3 $4"
Mul_Var $1 $n_plot_units_x/$n_plot_pixels_x
Mul_Var $2 $n_plot_units_y/$n_plot_pixels_y
#advise "Screen_2_Plot, scaling:  $$1 $$2 <- $3 $4"
# turn Y upside down
Assign $2 $plot_ymax-$plot_ymin-$$2
Add_Var $1 $plot_xmin
Add_Var $2 $plot_ymin
#advise "Screen_2_Plot:  $$1 $$2 <- $3 $4"
.

Define Screen_2_Plot_Delta 4 dx_varname dy_varname dx dy
Assign $1 $3*$n_plot_units_x/$n_plot_pixels_x
Assign $2 $4*$n_plot_units_y/$n_plot_pixels_y
.

Define Test_Coords 0
Set sx1 10
Set sy1 20
Set sdx 50
Set sdy 70
Assign sx2 $sx1+$sdx
Assign sy2 $sy1+$sdy

view
  draw $the_plotter
    move $sx1	$sy1
    cont $sx1	$sy2
    cont $sx2	$sy2
    cont $sx2	$sy1
    cont $sx1	$sy1
    cont $sx2	$sy2
    quit
  quit
Screen_2_Plot px1 py1 $sx1 $sy1
Screen_2_Plot px2 py2 $sx2 $sy2
Select_Plotter $the_plotter
< /dev/tty
Select_Pen $red_pen
view
  #advise "px1 $px1  py1 $py1   px2 $px2   py2 $py2"
  plot $the_plotter
    move $px1		$py1
    cont $px1		$py2
    cont $px2		$py2
    cont $px2		$py1
    cont $px1		$py1
    cont $px2		$py2
    quit
  quit

Set px1	1.5
Set py1	0.5
Set px2 3.5
Set py2 2.5
view
  #advise "px1 $px1  py1 $py1   px2 $px2   py2 $py2"
  plot $the_plotter
    move $px1		$py1
    cont $px1		$py2
    cont $px2		$py2
    cont $px2		$py1
    cont $px1		$py1
    cont $px2		$py2
    quit
  quit
Plot_2_Screen sx1 sy1 $px1 $py1
Plot_2_Screen sx2 sy2 $px2 $py2
< /dev/tty
view
  draw $the_plotter
    move $sx1	$sy1
    cont $sx1	$sy2
    cont $sx2	$sy2
    cont $sx2	$sy1
    cont $sx1	$sy1
    cont $sx2	$sy2
    quit
  quit
advise "TEST DONE"
< /dev/tty
.

 # X_Tick_At - draw a tick down from x,y
Define X_Tick_At 2 x y
PMove $1 $2
PCont $1 $2-$x_tick_len
.

Define Plain_Y_Axis 3 ymin ymax xpos
PMove $3 $1
PCont $3 $2
.

Define Plain_X_Axis 3 xmin xmax ypos
PMove $1 $3
PCont $2 $3
.

Define Plot_X_Axis_Offset 6 xmin xmax tick_spacing ypos first_tick_offset last_x_tick
Plain_X_Axis $1 $2 $4
Assign _x $1+$5
do
  X_Tick_At $_x $4
  Add_Var _x $3
  while $_x<=min($2,$6)
.


Define Plot_X_Axis 4 xmin xmax tick_spacing ypos
Plot_X_Axis_Offset $1 $2 $3 $4 0 $2
.

Define Plot_X_Axis_Top 4 xmin xmax tick_spacing ypos
Mul_Var x_tick_len -1
Plot_X_Axis_Offset $1 $2 $3 $4 0 $2
Mul_Var x_tick_len -1
.

Define Plot_Y_Axis 4 ymin ymax tick_spacing xpos
Plot_Y_Axis_With_Ticks $1 $2 $4 $1 $2 $3
.

Define Plot_Y_Axis_Right 4 ymin ymax tick_spacing xpos
Mul_Var y_tick_len -1
Plot_Y_Axis_With_Ticks $1 $2 $4 $1 $2 $3
Mul_Var y_tick_len -1
.

Define Draw_Y_Axis_Right 3 ymin ymax xpos
Draw_Y_Axis $1 $2 $3
.

Define Draw_Y_Axis 3 ymin ymax xpos
PMove $3 $1
PCont $3 $2
.

Define Plot_Y_Axis_With_Ticks 6 ymin ymax xpos first_tick last_tick tick_spacing
Draw_Y_Axis $1 $2 $3
If $1<$2
  Then "Draw_Y_Ticks_Ascending $4 $5 $3 $6"
  Else "Draw_Y_Ticks_Descending $4 $5 $3 $6"
.

Define Y_Tick_At 2 x y
PMove $1 $2
PCont $1-$y_tick_len $2
.

Define Draw_Y_Tick_Right_At 2 x y
PMove $1 $2
PCont $1+$y_tick_len $2
.

Define Draw_Y_Ticks_Ascending 4 y_first_tick y_last_tick xpos tick_spacing
If $4==0 "error_exit 'Draw_Y_Ticks_Ascending:  tick spacing cannot be zero!?'"
Assign _y $1
do
  Y_Tick_At $3 $_y
  Add_Var _y $4
  while $_y<=$2
.

Define Draw_Y_Ticks_Descending 4 y_first_tick y_last_tick xpos tick_spacing
If $4==0 "error_exit 'Draw_Y_Ticks_Descending:  tick spacing cannot be zero!?'"
Assign _y $1
do
  Y_Tick_At $3 $_y
  Add_Var _y -$4
  while $_y>=$2
.

Define Plot_Grid 6 xmin ymin xmax ymax x_spacing y_spacing
If $plot_foreground>=0 "Select_Pen $plot_foreground"
#draw the box in the current color
PMove $1 $2
PCont $3 $2
PCont $3 $4
PCont $1 $4
PCont $1 $2
If $grid_color>=0 "Select_Pen $grid_color"
Assign _x $1+$5
do
  PMove $_x $2
  PCont $_x $4
  Add_Var _x $5
  while $_x<=$3
Assign _y $2+$6
do
  PMove $1 $_y
  PCont $3 $_y
  Add_Var _y $6
  while $_y<=$4
.

Define Init_Legend_Fonts 1 plotter
If $fonts_loaded "exit_macro"
#advise "Init_Legend_Fonts:  legend_font = $legend_font"
view
  draw "$1"
    load $unit_font
    load $legend_font
    quit
  quit
Set fonts_loaded 1
.

Define Unit_Font 0
view draw $the_plotter font $unit_font quit quit
Set h_screen_units_per_char	6
Set v_screen_units_per_char	10
Update_Font_Constants
.

Define Legend_Font 0
view draw $the_plotter font $legend_font quit quit
#Set h_screen_units_per_char	12
#Set h_screen_units_per_char	9.0	# works good for centering, but end is getting chopped off...
# Not centered with a long legend, window 700x500
Set h_screen_units_per_char	14.4	# works good for centering, but end is getting chopped off...
# try this...
Set h_screen_units_per_char	12.4	# works good for centering, but end is getting chopped off...
# This is the height of the font in pixels...
Set v_screen_units_per_char	26
Update_Font_Constants
.

# When do we call Update_Range_Constants?
# These things need to be per-viewer...

Define Update_Range_Constants 0
#advise "\tplot_xmax = $plot_xmax\tplot_xmin = $plot_xmin"
#advise "\tleft_margin = $left_margin\tright_margin = $right_margin"
Assign h_plot_units_per_screen_unit	($plot_xmax-$plot_xmin)/(ncols('$the_plotter')*(1-($left_margin+$right_margin)))
#advise "Update_Range_Constants:  plot:  $plot_xmin - $plot_xmax, h_plot_units_per_screen_unit = $h_plot_units_per_screen_unit"
Assign n_graph_vpixels			(nrows('$the_plotter')*(1-($top_margin+$bot_margin)))
Assign v_plot_units_per_screen_unit	($plot_ymax-$plot_ymin)/$n_graph_vpixels

# bot_reserve is in pixels, we take this to plot units...
Assign legend_v_offset	(0.8*$bot_reserve)*$v_plot_units_per_screen_unit
Assign legend_v_offset_top	(0.5*$extra_top_reserve)*$v_plot_units_per_screen_unit
# The legend offset ought to depend on the length of the legend strings???
# 0.8 worked well for x11, but when left reserve is smaller (iPod),
# it's too much...
Assign legend_h_offset	(0.7*$left_reserve)*$h_plot_units_per_screen_unit

# should be in plot units?
Assign legend_h_offset_right	(0.40*$extra_right_reserve)*$h_plot_units_per_screen_unit
Assign _h nrows('$the_plotter')
.

Define Update_Font_Constants 0
Update_Range_Constants
Assign h_plot_units_per_char	$h_screen_units_per_char*$h_plot_units_per_screen_unit
Assign v_plot_units_per_char	$v_screen_units_per_char*$v_plot_units_per_screen_unit
Assign h_plot_units_per_rotated_char	$v_screen_units_per_char*$h_plot_units_per_screen_unit
Assign v_plot_units_per_rotated_char	$h_screen_units_per_char*$v_plot_units_per_screen_unit
#advise "Update_Font_Constants DONE"
.

Define Label_X_Tick 2 posn string
Unit_Font
view
  draw $the_plotter text_mode centered quit
  plot $the_plotter
    move $1 $plot_ymin
    cont $1 $plot_ymin-$x_tick_len

    #Assign string_width strlen('$2')*$h_plot_units_per_char
    Assign string_height $v_plot_units_per_char

    #Assign lx $1-($string_width/2)
    Assign lx $1
    Assign ly $plot_ymin-($x_tick_len+$string_height+$unit_v_offset)

    move $lx $ly
    string $2
    quit
  quit
.

Define Label_X_Tick_Top 2 posn string
Unit_Font
view
  draw $the_plotter text_mode centered quit
  plot $the_plotter
    # usually the tick is drawn already!?
    move $1 $plot_ymax
    cont $1 $plot_ymax+$x_tick_len

    # don't need this with text_mode implemented...
    #Assign string_width strlen('$2')*$h_plot_units_per_char
    Assign string_height $v_plot_units_per_char

    #Assign lx $1-($string_width/2)
    Assign lx $1
    Assign ly $plot_ymax+($x_tick_len+$unit_v_offset)

    move $lx $ly
    string $2
    quit
  quit
.


# We used to draw the ticks here...

Define Label_Y_Tick 2 posn string
Unit_Font
view
  draw $the_plotter
    text_mode right_justified
    quit
  plot $the_plotter
    # We used to use the string width to determine the offset,
    # but iOS allows us to right-justify text...
    # or at least we've implemented it.
    # But what will we do for unix/X11?
    #Assign string_width strlen('$2')*$h_plot_units_per_char
    Assign string_height $v_plot_units_per_char

    Assign ly $1-($string_height/2)
    #Assign lx $plot_xmin-($y_tick_len+$string_width+$unit_h_offset)
    Assign lx $plot_xmin-($y_tick_len+$unit_h_offset)

    # BUG need to get this right independent of viewer width!?
    #Assign lx $plot_xmin-(2.5*$y_tick_len+$string_width)
    move $lx $ly
    string $2
    quit
  quit
.

Define Label_Y_Tick_Right 2 posn string
Unit_Font
Left_Justify
view
  plot $the_plotter
    #move $plot_xmax $1
    #cont $plot_xmax+$y_tick_len $1

    # BUG we can get a more accurate measure now...
    Assign string_width strlen('$2')*$h_plot_units_per_char
    Assign string_height $v_plot_units_per_char

    Assign ly $1-($string_height/2)
    Assign lx $plot_xmax+($y_tick_len+$unit_h_offset)
    # BUG need to get this right independent of viewer width!?
    #Assign lx $plot_xmin-(2.5*$y_tick_len+$string_width)
    move $lx $ly
    string $2
    quit
  quit
.

Define Show_Legend_Area 0
view
  draw $the_plotter
    move $sx1 $sy1
    cont $sx1 $sy2
    cont $sx2 $sy2
    cont $sx2 $sy1
    cont $sx1 $sy1
    quit
  quit
.

Define Symbol_At 4 symbol_macro px py size
#advise "Symbol_At $1 $2 $3 $4"
Plot_2_Screen sx1 sy1 $2 $3
$1 $sx1 $sy1 $4
.

Define Symbol 2 symbol_macro size
Set draw_symbol $1
Set symbol_size $2
.

Define Diamond 3 x y size
view
  draw $the_plotter
    fill_poly 4
      $1    $2-$3
      $1+$3 $2   
      $1    $2+$3
      $1-$3 $2   
    quit
  quit
.

Define Square 3 x y size
view
  draw $the_plotter
    fill_poly 4
      $1-$3 $2-$3
      $1+$3 $2-$3
      $1+$3 $2+$3
      $1-$3 $2+$3
    quit
  quit
.

Define Bar_At 3 x y width
Bar_At_2 $1 $2 $plot_ymin $3
.

# This version lets us specify the top and bottom of the bar,
# useful for box-and-whisker plots...

Define Bar_At_2 4 x y1 y2 width
Plot_2_Screen bx1 by1 $1-$4/2 $3
Plot_2_Screen bx2 by2 $1+$4/2 $2
# y increases down...
Decrement by1	# why do this???
		# when this is plot_ymin, this would move it up?
view
  draw $the_plotter
    fill_poly 4
      $bx1 $by1
      $bx1 $by2
      $bx2 $by2
      $bx2 $by1
    quit
  quit
.

Define Bar_Key_At 3 x y size_in_pixels
Plot_2_Screen bx1 by1 $1 $2
view
  draw $the_plotter
    fill_poly 4
      $bx1    $by1
      $bx1+$3 $by1
      $bx1+$3 $by1+$3
      $bx1    $by1+$3
    quit
  quit
.

Define Inverted_Triangle 3 x y size
view
  draw $the_plotter
    fill_poly 3
      $1    $2-$3
      $1-$3 $2+$3
      $1+$3 $2+$3
    quit
  quit
.


Define Horz_Triangle_L 3 x y size
view
  draw $the_plotter
    fill_poly 3
      $1+$3 $2+$3
      $1-$3 $2
      $1+$3 $2-$3
    quit
  quit
.

Define Horz_Triangle_R 3 x y size
view
  draw $the_plotter
    fill_poly 3
      $1-$3 $2+$3
      $1+$3 $2
      $1-$3 $2-$3
    quit
  quit
.

Define Triangle 3 x y size
view
  draw $the_plotter
    fill_poly 3
      $1-$3 $2-$3
      $1+$3 $2-$3
      $1    $2+$3
    quit
  quit
.


Define Disk 3 x y radius
view
  draw $the_plotter
    fill_arc $1-$3 $2-$3 2*$3 2*$3 0 32000
    quit
  quit
.

Define Sized_Symbol_Plot 1 xys_list
Set i 0
repeat ncols($1)
  Assign ssp_x value($1[$i]{0})
  Assign ssp_y value($1[$i]{1})
  Assign symbol_size value($1[$i]{2})
  Symbol_At $draw_symbol $ssp_x $ssp_y $symbol_size

###  Plot_2_Screen sx1 sy1 $ssp_x $ssp_y
####  advise "$sx1 <- $ssp_x"
###  $draw_symbol $sx1 $sy1 $symbol_size

  Increment i
  end
.

Define Check_Plot_Symbol 0
If !var_exists(draw_symbol)  "Set draw_symbol Disk"
If !var_exists(symbol_size)  "Set symbol_size 2"
.

Define Symbol_Plot 1 xy_list
Check_Plot_Symbol
Assign _sp_n ncols('$1')
If $_sp_n==1
  Then "Plot_One_Symbol $1"
  Else "Plot_Many_Symbols $1"
.

Define Plot_Many_Symbols 1 xy_list
Set i 0
repeat ncols($1)
  Plot_One_Symbol $1[$i]
  Increment i
  end
.

Define Plot_One_Symbol 1 point
Assign _pos_x value($1{0})
Assign _pos_y value($1{1})
Symbol_At $draw_symbol $_pos_x $_pos_y $symbol_size
.

Define Bar_Chart 2 xy_list bar_width
Set i 0
repeat ncols($1)
  Assign _x value($1[$i]{0})
  Assign _y value($1[$i]{1})
  If $_y!=0
    "Bar_At $_x $_y $2"
  Increment i
  end
.


Define Double_Bar_Chart 4 xy_list bar_width color1 color2
Set i 0
repeat ncols($1)
  Assign _x value($1[$i]{0})
  Assign _y1 value($1[$i]{1})
  Assign _y2 value($1[$i]{2})
  If $_y1>=$_y2&&$_y1>0 "Select_Pen $3 Bar_At $_x $_y1 $2"
  If $_y1>=$_y2&&$_y2>0 "Select_Pen $4 Bar_At $_x $_y2 $2"
  If $_y1<$_y2 "Select_Pen $4 Bar_At $_x $_y2 $2"
  If $_y1<$_y2&&$_y1>0 "Select_Pen $3 Bar_At $_x $_y1 $2"
  Increment i
  end
.


Define PString 1 string
view
  plot $the_plotter
    string $1
    quit
  quit
.

Define Thick_Plot_Type 1 macro_name
Set thick_plot_macro $1
.

# Old method for thick drawing, very inefficient!?

## We pass n_thick, (n_thick-1)/2 is the radius in pixels
#Define Thicken2 2 radius dataset
#Dup_Float shifted_points $2
#Assign radius (($1-1)/2)
#Assign n_circum max(1,ceil($radius*8*atan(1)))	# twopi
#Screen_2_Plot xr yr $radius $radius
#Screen_2_Plot xz yz 0 0
#Add_Var xr -$xz
#Add_Var yr -$yz
#Assign _arginc 8*atan(1)/$n_circum
#Set arg 0
#Set old_xshift 0
#Set old_yshift 0
#VMov shifted_points $2
#repeat $n_circum
#  Assign x_shift $xr*cos($arg)
#  Assign y_shift $yr*sin($arg)
#  VSAdd shifted_points{0} shifted_points{0} $x_shift-$old_xshift
#  VSAdd shifted_points{1} shifted_points{1} $y_shift-$old_yshift
#  $thick_plot_macro shifted_points
#  Set old_xshift $x_shift
#  Set old_yshift $y_shift
#  Add_Var arg $_arginc
#  end
#Set x_shift 0
#Set y_shift 0
## these lines restored the old values, but now we do it in a scratch buf
##VSAdd shifted_points{0} shifted_points{0} $x_shift-$old_xshift
##VSAdd shifted_points{1} shifted_points{1} $y_shift-$old_yshift
#Delete_Image shifted_points
#.

# shift right, plot
# shift up, plot
# shift left, plot
# shift down, plot

#Define Thicken 2 multiplier data_set
#
## move up and right
#VSAdd $2{0} $2{0} $1*$x_shift
#VSAdd $2{1} $2{1} $1*$y_shift
#$thick_plot_macro $2
#
## move down
#VSAdd $2{1} $2{1} -2*$1*$y_shift
#$thick_plot_macro $2
#
## move left
#VSAdd $2{0} $2{0} -2*$1*$x_shift
#$thick_plot_macro $2
#
## move up
#VSAdd $2{1} $2{1} 2*$1*$y_shift
#$thick_plot_macro $2
#
## restore
#VSAdd $2{0} $2{0} $1*$x_shift
#VSAdd $2{1} $2{1} -$1*$y_shift
#.

#Define Thick_Plot 2 n data_set
##advise "Thick_Plot $1 $2"
## We really need to determine how many pixels to determine the best shift...
#Set __x1 0
#Set __y1 0
#Set __x2 1
#Set __y2 1
#Screen_2_Plot __px1 __py1 $__x1 $__y1
#Screen_2_Plot __px2 __py2 $__x2 $__y2
##Assign x_shift 0.2*($__px2-$__px1)
##Assign y_shift 0.2*($__py2-$__py1)
#Assign x_shift ($__px2-$__px1)
#Assign y_shift ($__py2-$__py1)
#
#Set n_thick $1
#do
##  Thicken $n_thick $2
##  Thicken -$n_thick $2
#  Thicken2 $n_thick $2
#  Decrement n_thick
#  while $n_thick>0
#.

# New version using native thick lines
Define Thick_Plot 2 n data_set
Set_Line_Width $1
XYPlot $2
Set_Line_Width 1	# restore to preserve previous behavior
# BUG?  default line thickness not 1 on retina display?
.

Define Set_Line_Width 1 width
view draw $the_plotter line_width $1 quit quit
.

# BUG should have shared code for x and y!

Define Label_X_Ticks 3 first last delta
If var_exists('suppress_tick_labels') exit_macro
Select_Pen $label_color
Assign tick_x $1
do
  Two_Decimal_Places tick_string $tick_x
  Label_X_Tick $tick_x	$tick_string
  Add_Var tick_x $3
  while $tick_x<=$2
.

Define Two_Decimal_Places 2 varname value
Assign $1 round($2*100)/100
.

# this one adds the position delta to the label

Define Label_X_Ticks_Offset 4 first_posn max_posn delta_posn first_label 
Select_Pen $label_color
Assign n_x_ticks 1+floor(($2-$1)/$3)
Set tick_x $1
Assign tick_x_label $4
repeat $n_x_ticks
  Label_X_Tick $tick_x $tick_x_label
  Add_Var tick_x $3
  Add_Var tick_x_label $3
  end
.

# this one allows an affine relation between posn and label

Define Linear_X_Tick_Labels 5 first_posn max_posn delta_posn first_label delta_label
Select_Pen $label_color
Assign n_div (($2)-($1))/($3)
Assign n_x_ticks 1+round($n_div)
Set tick_x $1
Assign tick_x_label $4
repeat $n_x_ticks
  Label_X_Tick $tick_x $tick_x_label
  Add_Var tick_x $3
  Add_Var tick_x_label $5
  end
.

Define Label_Y_Ticks 3 first last delta 
If var_exists('suppress_tick_labels') exit_macro
If !$allow_color_tick_labels "Push_Var pen_color Select_Pen $label_color"
Assign n_y_ticks 1+floor($tiny+abs($2-($1))/$3)
#advise "Label_Y_Ticks $1 $2 $3"
#Print n_y_ticks
Assign tick_y $1
repeat $n_y_ticks
  Label_Y_Tick $tick_y	$tick_y
  Add_Var tick_y sign($2-$1)*$3
  end
If !$allow_color_tick_labels "Pop_Var pen_color"

# restore left-justification for backward compatibility...
Left_Justify
.

Define Label_Y_Ticks_Right 3 first max delta 
If var_exists('suppress_tick_labels') exit_macro
If !$allow_color_tick_labels "Push_Var pen_color Select_Pen $label_color"
Assign n_y_ticks 1+floor(($2-$1)/$3)
Set tick_y $1
repeat $n_y_ticks
  Label_Y_Tick_Right $tick_y	$tick_y
  Add_Var tick_y $3
  end
If !$allow_color_tick_labels "Pop_Var pen_color"
.

Define Left_Justify 0
view draw $the_plotter text_mode left_justified quit quit
.

Define Right_Justify 0
view draw $the_plotter text_mode right_justified quit quit
.

Define Center_Text 0
view draw $the_plotter text_mode centered quit quit
.

Define S_At 3 string x y
PMove $2 $3
PString $1
.

Define Plot_Datafile 1 filename
Count_Lines _nl $1
Vector _pts $_nl 2 float	# bug - should count columns
Get_Ascii _pts $1
XYPlot _pts
Delete_Image _pts
.

Define Save_Plot 2 filename viewer
If obj_exists(_plotbuf) "Delete_Image _plotbuf"
Image _plotbuf nrows('$2') ncols('$2') 3 u_byte
view extract _plotbuf $2 0 0 quit
Rotate_Colors _plotbuf
Write_File_Header $1 1
Put_Next _plotbuf $1
.

Define Init_For_Plot_Locale 1 locale
If !strcmp('$1','x11') "Assume_Unix_Plot_Locale exit_macro"
advise "Init_For_Plot_Locale:  not sure what to do for locale $1!?"
.

# this is the default, but $macro_dir is not defined on iOS

Define Assume_Unix_Plot_Locale 0
< $macro_dir/view/unix_plot.mac
.

# Now execute a few commands...

Set the_plotter no_plotter
#Set y_legend none
#Set x_legend none
Set current_window you_need_to_set_current_window
Set exit_on_plotter_click 0

# some default values
Set plot_xmin	0
Set plot_xmax	1
Set plot_ymin	0
Set plot_ymax	1

Set minmax_set 0

Set plot_foreground -1
Set plot_background -1

Set allow_color_tick_labels 1
Set tiny 0.00001

Set thick_plot_macro XYPlot
Set grid_color -1


# just set some default values to set the vars...
#Set h_screen_units_per_char	6
# for x11 on mac?
Set h_screen_units_per_char	7
Set v_screen_units_per_char	10
Set descender_fraction	0.20

Set fonts_loaded 0

Init_Plotter_Param_Indices
Init_Color_Indices

# Can't reference macro_dir here, because when using on iOS all the macros
# are loaded into one startup file, and this throws an undefined variable warning,
# even though we are not executing that line.
# But a better solution is to hide the variable reference in a macro.
# I would have thought that the use of single quotes would have postponed the
# expansion of the variable???

If !var_exists(plot_locale) Assume_Unix_Plot_Locale

Init_Font_Stuff

Default_Reserve
# default default is white on black (for slides)
#Default_White_On_Black
Default_Black_On_White


Set plotsupp_read 1

Stop_File plotsupp.mac

